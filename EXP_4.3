// app.js
const express = require("express");
const app = express();
const PORT = 3000;

app.use(express.json());

// ----- In-memory seat data -----
// Each seat: { id, status: "available" | "locked" | "booked", lockedBy, lockExpiresAt }
let seats = [];
const TOTAL_SEATS = 10;

// Initialize seats
for (let i = 1; i <= TOTAL_SEATS; i++) {
  seats.push({ id: i, status: "available", lockedBy: null, lockExpiresAt: null });
}

// Helper to clean expired locks
function cleanExpiredLocks() {
  const now = Date.now();
  seats.forEach((seat) => {
    if (seat.status === "locked" && seat.lockExpiresAt <= now) {
      seat.status = "available";
      seat.lockedBy = null;
      seat.lockExpiresAt = null;
    }
  });
}

// ----- Routes -----

// Root route
app.get("/", (req, res) => {
  res.send("ðŸŽ« Welcome to the Ticket Booking API! Use /seats to view seats.");
});

// Get all seats
app.get("/seats", (req, res) => {
  cleanExpiredLocks();
  res.json(seats);
});

// Lock a seat
app.post("/seats/:id/lock", (req, res) => {
  cleanExpiredLocks();
  const seatId = parseInt(req.params.id);
  const { user } = req.body;

  if (!user) return res.status(400).json({ error: "User is required to lock a seat" });

  const seat = seats.find((s) => s.id === seatId);
  if (!seat) return res.status(404).json({ error: "Seat not found" });

  if (seat.status === "booked") return res.status(400).json({ error: "Seat already booked" });
  if (seat.status === "locked") return res.status(400).json({ error: "Seat already locked" });

  seat.status = "locked";
  seat.lockedBy = user;
  seat.lockExpiresAt = Date.now() + 60 * 1000; // lock expires in 1 minute

  res.json({ message: Seat ${seatId} locked by ${user}, seat });
});

// Confirm booking
app.post("/seats/:id/confirm", (req, res) => {
  cleanExpiredLocks();
  const seatId = parseInt(req.params.id);
  const { user } = req.body;

  if (!user) return res.status(400).json({ error: "User is required to confirm booking" });

  const seat = seats.find((s) => s.id === seatId);
  if (!seat) return res.status(404).json({ error: "Seat not found" });

  if (seat.status !== "locked" || seat.lockedBy !== user) {
    return res.status(400).json({ error: "Seat is not locked by you or already booked" });
  }

  seat.status = "booked";
  seat.lockedBy = null;
  seat.lockExpiresAt = null;

  res.json({ message: Seat ${seatId} successfully booked by ${user}, seat });
});

// Start server
app.listen(PORT, () => {
  console.log(ðŸš€ Server running on http://localhost:${PORT});
});
