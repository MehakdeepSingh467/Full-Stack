// app.js
const express = require("express");
const app = express();
const PORT = 3000;

// Middleware to parse JSON requests
app.use(express.json());

// In-memory array to store cards
let cards = [];
let nextId = 1;

// âœ… Root route (fixes "Cannot GET /")
app.get("/", (req, res) => {
  res.send("ðŸŽ´ Welcome to the Playing Card Collection API! Use /cards endpoint.");
});

// Get all cards
app.get("/cards", (req, res) => {
  res.json(cards);
});

// Add a new card
app.post("/cards", (req, res) => {
  const { suit, value } = req.body;
  if (!suit || !value) {
    return res.status(400).json({ error: "Suit and value are required" });
  }

  const newCard = { id: nextId++, suit, value };
  cards.push(newCard);
  res.status(201).json(newCard);
});

// Get a card by ID
app.get("/cards/:id", (req, res) => {
  const card = cards.find((c) => c.id === parseInt(req.params.id));
  if (!card) {
    return res.status(404).json({ error: "Card not found" });
  }
  res.json(card);
});

// Delete a card by ID
app.delete("/cards/:id", (req, res) => {
  const index = cards.findIndex((c) => c.id === parseInt(req.params.id));
  if (index === -1) {
    return res.status(404).json({ error: "Card not found" });
  }

  const removed = cards.splice(index, 1);
  res.json({ message: "Card deleted", card: removed[0] });
});

// Start the server
app.listen(PORT, () => {
  console.log(ðŸš€ Server running on http://localhost:${PORT});
});
